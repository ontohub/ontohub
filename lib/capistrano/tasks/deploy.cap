
namespace :deploy do

  desc 'Restart application'
  task :restart do
    on roles(:app) do
      execute :touch, release_path.join('tmp/restart.txt')
    end
  end

  desc "Saves the current revision to release_path/REVISION"
  task :set_revision do
    on roles(:app) do
      # dump current git revision
      rev = capture "cd #{repo_path} && git rev-parse --short #{fetch :branch}"
      execute :echo, "#{rev} > #{release_path}/REVISION"
    end
  end

  desc "Moves and replaces the secret-token if missing in shared directory"
  task :symlink_secret do
    on roles(:app) do
      filename       = 'secret_token.rb'
      release_secret = release_path.join("config/initializers/#{filename}")
      shared_secret  = shared_path.join("config/#{filename}")

      unless test "[ -f #{shared_secret} ]"
        within release_path do
          execute :rake, "secret:replace"
        end
        execute :mkdir, "-p #{shared_path.join('config')}"
        execute :mv, "#{release_secret} #{shared_secret}"
      end

      # symlink secret token
      execute :ln, "-nfs #{shared_secret} #{release_secret}"
    end
  end

  desc "Create Hets Instance if neccessary"
  task :create_hets_instances do
    on roles(:app) do
      within current_path do
        with rails_env: fetch(:rails_env) do
          execute :rake, 'hets:generate_first_instance'
        end
      end
    end
  end

  desc "Migrate data asynchronously"
  task :migrate_data_asynchronously do
    on roles(:app) do
      within current_path do
        with rails_env: fetch(:rails_env) do
          execute :rake, 'data:migrate:async'
        end
      end
    end
  end

  after :updated, :create_hets_instances
  after :updated, :migrate_data_asynchronously

  after :updated, :symlink_secret
  after :updated, :set_revision
  after :publishing, :restart
end
